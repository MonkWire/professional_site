<%- include("header") %>
    <h1>Projects</h1>
    <h2><a href="/wordle_solver/index">Wordle Solver</a></h2>
    <p><b>What is this? </b> A program I wrote to help you cheat at Wordle.</p>
    <p><b>Why did you make this?</b> I like designing puzzles and word games. I thought this would be a good introduction to working with word banks in JS. I originally wrote this in Python3, then when I began learning JS, I rewrote my program as a web application.</p>
    <p><b>How does this program work?</b> Like Wordle, this program uses two word banks: a common word bank and an comprehensive word bank. Unfortunately, the common word bank is not the same as common word bank that Wordle uses. Both word banks are loaded on page load. I chose to do this because the word banks only include five-letter english words, so there is not enough data to justify requiring post requests every time a user enters a command. Furthermore, once loaded, this application is capable of running offline.</p>
    <p><b>What did you learn while writing this?</b> This project forced me think about what to load in the browser and what to load on the server.</p>
    <p><b>What features do you plan to add?</b> Often, the most efficient way to play wordle is to guess words that you <i>know</i> will not be the solution, but that will limit the number of overall guesses you need to make. I would like to add a "suggested word" feature, which finds words that provide the most information for future guesses.</p>
    <h2><a href="/sudoku/index">Sudoku</a></h2>
    <p><b>What is this? </b> This a sudoku player, not a sudoku puzzle generator. I did not design the puzzles myself. Puzzles come from <a href="krazydad.com">krazydad.com</a>.</p>
    <p><b>Why did you make this?</b> I love sudoku, and eventually, I would like to write a player and generator for less common sudoku variants (Killer Sudoku and Jigoku are my favorites). This program is a first step.</p> 
    <p><b>How does this program work?</b> This program generates a grid using only JS. Each cell is a combination of a visual element that gets manipulated using css classes, and a non-visual element what is indexed by row, column, and block. Event listeners are given to all display cells. These listeners trigger data changes to a corresponding non-visible cell.</p>
    <p><b>What did you learn while writing this?</b> I thought a lot about user experience while making this. I added features that I appreciated in other solvers like selected number highlighting, row and column for selected cells, and auto-checking for basic errors.</p>
    <p><b>What features do you plan to add?</b> So many! The big ones are a pencil tool (this has proven to be a serious UI challenge), and my own puzzle generator.</p>
    <h2><a href="/cross_words/index">Cross-words Game</a></h2>
    <p><b>What is this?</b> This is a game that I designed. It is a work in progress.</p>
    <p><b>Why did you make this?</b> This is my first serious attempt to design a puzzle. I enjoy thinking about what makes a puzzle good. Every puzzle I desgin will make me a better puzzle designer.</p>
    <p><b>How does this program work?</b> The hardest part of this project was writing the generator for these puzzles. Grids are generated recursively. At each step of recursion, the generator tries a new "across" word, checks that there valid "down" words (by checking a comprehensive set of all possible prefixes), then either tries another "across" word or takes a step backwards. Another challenge was implementing draggable elements and drop zones. Lastly, all puzzles are generated on the server, after a get request is made, which causes the page to take a longer time to load. Eventually, I will had a bank of pre-generated puzzles that load quicker.</p>
    <p><b>What did you learn while writing this?</b> I got to practice writing recursive functions in JS, I learned how to create elements that can be dragged and dropped, and I learned how to create my own local npm modules.</p>
    <p><b>What features do you plan to add?</b> This is a work in progress, and the game is <i>barely</i> playable as is. My next steps are to add a checker, add more words to the word bank then shuffle it, and at some much needed UI improvements.</p>
    <h2><a href="/authority_tracker/index">Star Realms Authority Tracker</a></h2>
    <p><b>What is this?</b> This is a score keeper for the Star Realms card game. It is also my first web app.</p>
    <p><b>Why did you make this?</b> I had just learned about flex-box and I wanted practice.</p>
    <p><b>How does this program work?</b> It's a very basic web app that uses minimal JS to apply classes and values to elements on the page</p>
    <p><b>What did you learn while writing this?</b> A lot, actually! This was the first time I tried to write somethign that was both nice to use and nice to look at. I implemented multiple ways of changing score, player name customization, and player commander customization.</p>
    <p><b>What features do you plan to add?</b> I don't plan to continue working on this, but I can think of some obvious ways to improve it. This page should be mobile-friendly, and it's not. Also, the background image of a player's score box should change to the commander that the player has chosen.</p>
     

    <script src="/public/scripts/nav_bar.js"></script>
</body>

</html>